토이 프로젝트
- New > Dynamic Web Project > "ToyProject" > 톰캣 8.5, Module 3.1 > Context root ("toy") > 체크박스 체크O(web.xml)


요구사항
1. 게시판
2. 회원(인증)
3. JSP Model 2
4. Oracle 11g
5. Bootstrap + jQuery
6. 부가 기능(차트, 맵 등..)


DB 설계
- 점차적..


패키지 구조
- "com.test.toy" 			> 메인
- "com.test.toy.board" 		> 게시판
- "com.test.toy.member"		> 회원
- "com.test.toy.etc"		> 부가 기능x`


폴더 구조
- webapp > WEB-INF > "views"				> 뷰 루트(toy 패키지 대응)
						> "board"			> 게시판
						> "member"			> 회원
						> "etc"				> 부가 기능
						> "inc"				> 조각 페이지


라이브러리 설치
- webapp > WEB-INF > lib
						> ojdbc6.jar		> 오라클
						> jstl-1.2.jar		> JSTL
						> lombok.jar		> Lombok
						> cos.jar			> 파일업로드
- webapp > "asset"
				> "css"
				> "js"
				> "fonts"
				> "images"
				> 파일업로드 폴더



기본 템플릿 페이지
- com.test.toy > "Template.java"
- views > "template.jsp"

- webapp > asset > css > "toy.css"
				 > js  > "toy.js"

- webapp > WEB-INF > inc > "header.jsp"





시작 페이지
- com.test.toy > "Index.java"
- views > "index.jsp"


회원 가입
- com.test.toy.member > "Register.java"
                      > "RegisterOk.java"
- views > member > "register.jsp"
                   "registerok.jsp"
- webapp > "pic"

- com.test.toy > DBUtil.java
- com.test.toy.member > "MemberDAO.java"
					  > "MemberDTO.java" <- tblUser 담당
					            
                                         


로그인/로그아웃
- com.test.toy.member > "Login.java"
					  > "LoginOk.java"
					  > "Logout.java"
- views > member > "login.jsp"
			     > "loginok.jsp"
			     > "logout.jsp"
			     
			     					  

회원 정보
- com.test.toy.member > "Info.java"
- views > member > "info.jsp"
- webapp > pic > pic.png





회원 탈퇴
- com.test.toy.member > "Unregister.java"
					  > "UnregisterOk.java"
- views > member > "unregister.jsp"
			     > "unregisterok.jsp"




게시판
- com.test.toy.board > "BoardDAO.java"
                     > "BoardDTO.java"
                     > "List.java"
                     > "Add.java"
                     > "AddOk.java"
                     > "View.java"
                     > "Edit.java"
                     > "EditOk.java"
                     > "Del.java"
                     > "DelOk.java"
- views > board > "list.jsp"
			    > "add.jsp"
			    > "addok.jsp"
			    > "view.jsp"
			    > "edit.jsp"
			    > "editok.jsp"
			    > "del.jsp"
			    > "delok.jsp"

			    
                    
-------------------------------------------------- CRUD



검색

댓글쓰기

- com.test.toy.board > "AddCommentOk.java"
			         > "CommentDTO.java"

댓글삭제
- com.test.toy.board > "DelCommentOk.java"


댓글수정
- com.test.toy.board > "EditCommentOk.java"					 





페이징
- 가상으로 일정 단위의 게시물을 가져오는 기법 > SQL 사용







답변쓰기(계층형 게시판, 답변 게시판)
- 테이블 수정 > thread, depth 컬럼 추가

- thread, depth 컬럼의 규칙!!

1. 새글 쓰기
	- /toy/board/add.do
	a. 현존하는 모든 게시물 중에서 가장 큰 thread 값을 찾아서, 그 값에 +1000을 한 값을 새글의 thread값으로 사용한다.
	b. 새글의 depth는 항상 0을 넣는다.

2. 답변글 쓰기
	- /toy/board/add.do?reply=1
	a. 현존하는 모든 게시물의 thread값을 대상으로 현재 작성 중인 답변글의 부모글 thread값보다 작고, 이전 새글을 thread값보다 큰 thread를 모두 찾아서 -1을 한다.
	b. 현재 답변글의 thread값은 부모글의 thread-1을 넣는다.
	c. 현재 답변글의 depth값은 부모글의 depth+1을 넣는다.
	
	
	
	



파일업로드
- 게시판 첨부파일
- webapp > "files" 폴더 생성
- com.test.toy.board > "Download.java"











태그(#)
- 해시 태그 > (카테고리) 검색 기능
- webapp > asset > css > tagify.css
                 > js > jQuery.tagify.min.js
                 
- webapp > WEB-INF > lib > json-simple-1.1.1.jar












싫어요/좋아요
- 싫어요 카운트, 좋아요 카운트
- com.test.toy.board > "GoodBad.java"





		
차트 연동
- 회원 > 게시물 생산 > 차트 출력

- com.test.toy.etc > "Chart.java"
- views > etc > "chart.jsp"

 

지도 연동
- 게시물 + 첨부파일(이미지 > 메타 정보 > 위도,경도) > 지도 출력
- 지도 API 수업

- com.test.toy.etc > "Map.java"
- views > etc > "map01.jsp"
 

장소 CRUD
- 장소 즐겨찾기 + 지도 연동

- com.test.toy.etc > "Food.java" //목록
                   > "AddFood.java" 
                   > "AddFoodOk.java"
                   > "EtcDAO.java"
                   > "FoodDTO.java"
                   > "CategoryDTO.java"
                   
- views > etc > "food.jsp"
			  > "addfood.jsp"
			  
			  






서버 갱신 데이터 > 브라우저 전달
1. 새로 고침 > 프로그램
2. <frame>, <iframe> 사용
3. Ajax <-> ActiveX, Applet
4. WebSocket








Ajax, Asynchronous JavaScript and XML
- 비동기 자바스크립트 and XML
- 자바스크립트 기반 비동기 통신 기법
- 브라우저와 웹서버간의 자바스크립트를 사용한 데이터를 주고 받는 기술
- ~ 현재: 브라우저(크롬) ~ 웹서버(아파치톰캣)


네크워크 통신 방식
- 동기 통신
- 비동기 통신




Ajax 구현 방식
1. XMLHttpRequest 사용
2. jQuery Ajax 사용
3. fetch 사용




- "com.test.toy.ajax" > "AjaxDAO.java"
					  > "Ex01.java"
					  > "ResearchDTO.java"

- views > "ajax" > "ex01.jsp"
 

DB
- script.sql




- com.test.toy.ajax > "Ex02.java"
					> "Ex02Data.java"
					> "Ex02Data2.java"
- views > ajax > "ex02.jsp"
			   > "ex02data.jsp"
			   > "ex02data2.jsp"


아이디 중복 검사
- com.test.toy.ajax > "Ex03.java"
					> "IdCheck.java"
					> "IdCheckOk.java"
					> "IdCheckOk2.java"
- views > ajax > "ex03.jsp"
	           > "idcheck.jsp"	



- com.test.toy.ajax > "Ex04.java"
					> "Ex04Data.java"
- views > ajax > "ex04.jsp"















































